# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Pull request check

on:      
  pull_request:
    branches:
      - '*'
jobs:
  check_skip_flags:
    name: Check skip flags
    runs-on: ubuntu-latest
    steps:
      - name: Get repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Print head git commit message
        run: |
          echo "$(git show -s --format=%s)" 
      - name: Check message
        run: |
          git log --format=%s | while read -r line; do
          if [[ $line =~ \[#[0-9]+\] ]]; then
            echo "Commit Message: $line (Matched)"

            issue_number=$(echo "$line" | grep -oE '\[#([0-9]+)\]' | sed 's/\[#\([0-9]\+\)\]/\1/')
            if [[ -n "$issue_number" ]]; then
              # Kiểm tra sự tồn tại của issue bằng GitHub API 
              apiUrl=https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/$issue_number
              response=$(curl -s $apiUrl)
              echo $apiUrl
              url=$(echo "$response" | jq -r '.html_url')
              if [[ $url =~ ^https://github.com/.*\/issues\/[0-9]+$ ]]; then
                echo "Đây là URL của issues: $url"
              else
                echo "Đây không phải là URL của issues: $url"
                exit 1
              fi
            fi
          else
            echo "Commit Message: $line (Not Matched)"
            exit 1 # Exit với mã thành công nếu tìm thấy
          fi
          done
