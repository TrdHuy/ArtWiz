name: AutoVersionBump

on:
  workflow_dispatch:  # Đây là sự kiện để kích hoạt quy trình
    inputs:
      my_input:
        description: A custom input
        required: false
        default: "default_value"

jobs:
  version_bump:
    runs-on: ubuntu-latest
    env:
     BRANCH_NAME: feature_trdhuy_autoVersionUp_p1
     PROJECT_FILE_PATH: SPRNetTool/SPRNetTool.csproj
    steps:
    - name: Print Input
      run: |
        echo "Input: ${{ github.event.inputs.my_input }}"
        
    - name: Checkout branch
      uses: actions/checkout@v3
      with:
        ref: ${{ env.BRANCH_NAME }}

    - name: Githublog
      id: extract_version
      uses: actions/github-script@v6
      with:
        script: |
          const log = ${{ toJSON(github) }};
          console.log(log);
    - name: Github object
      uses: actions/github-script@v6
      with:
        script: |
          console.log(github);    
          
    - name: project file detail
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = '${{ env.PROJECT_FILE_PATH }}';  // Thay đổi đường dẫn tương ứng
          const versionRegex = /<Version>(.*?)<\/Version>/;
          // Đọc nội dung của tệp .csproj
          let csprojContent = fs.readFileSync(path, 'utf8');
          console.log(csprojContent);
    - uses: actions/setup-node@v3
      with:
          node-version: 16
    - run: npm install @octokit/action
    - name: Build
      uses: actions/github-script@v6
      with:
        script: |
          const { Octokit } = require("@octokit/action");
          const octokit = new Octokit({
            auth: '${{ secrets.WORK_FLOW_ACCESS_TOKEN }}'
          })
          
          const res = await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: '${{ env.PROJECT_FILE_PATH }}',
            ref: '${{ env.BRANCH_NAME }}',
            headers: {
              'X-GitHub-Api-Version': '2022-11-28'
            }
          })
          console.log(res)
    # - name: Get last commit message
    #   shell: bash
    #   run: |
    #     response=$(curl -L \
    #     -H "Accept: application/vnd.github+json" \
    #     -H "Authorization: Bearer  ${{ secrets.GITHUB_TOKEN }}" \
    #     -H "X-GitHub-Api-Version: 2022-11-28" \
    #     https://api.github.com/repos/${{ github.repository }}/commits/${{ env.BRANCH_NAME }})
    #     commit_message=$(echo "$response" | jq -r '.commit.message')
    #     # In commit message
    #     echo "Commit Message: $commit_message"
    #     echo "LAST_COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV

    # - uses: actions/setup-node@v3
    #   with:
    #       node-version: 16
    # - run: npm install xml2js
    # - name: Run JavaScript script
    #   uses: actions/github-script@v6
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const xml2js = require('xml2js');
    #       const fs = require('fs');
    #       const path = '${{ env.PROJECT_FILE_PATH }}';  // Thay đổi đường dẫn tương ứng
    #       let xmlString = fs.readFileSync(path, 'utf8');
    #       // Phân tích XML thành đối tượng JavaScript
    #       xml2js.parseString(xmlString, (err, result) => {
    #           if (err) {
    #               console.error(err);
    #               return;
    #           }
    #           const project = result.Project;
    #           const propertyGroup = project.PropertyGroup[0];
    #           const propertiesToCheck = ['AssemblyVersion', 'FileVersion', 'Version'];
    #           propertiesToCheck.forEach(propName => {
    #               if (!propertyGroup.hasOwnProperty(propName)) {
    #                   // Nếu không tồn tại, thêm nó với giá trị mặc định
    #                   propertyGroup[propName] = ['1.0.0.0'];
    #               } else {
    #                   // Nếu đã tồn tại, tăng giá trị lên
    #                   const currentVersion = propertyGroup[propName][0].split('.').map(Number);
    #                   currentVersion[3]++; // Tăng phần số build lên
    #                   propertyGroup[propName][0] = currentVersion.join('.');
    #               }
    #           });

    #           const builder = new xml2js.Builder();
    #           const newXmlString = builder.buildObject(result);
    #           fs.writeFileSync(path, newXmlString, 'utf8');
    #           let newRedXML = fs.readFileSync(path, 'utf8');
    #           console.log(newRedXML);
    #           console.log('File đã được cập nhật.');
    #           const branchExists = await github.repos.getBranch({
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             branch: '${{ env.BRANCH_NAME }}',
    #           }).catch(() => false);
    #           if (!branchExists) {
    #             console.log(`Branch ${{ env.BRANCH_NAME }} does not exist.`);
    #             return;
    #           }
    #           console.log(`Branch ${{ env.BRANCH_NAME }} exist.`);
                
    #       })
