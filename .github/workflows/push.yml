on:      
  push:
    branches:
      - '*'
jobs:

  build:
    runs-on: windows-latest
    env:
     VERSION_UP_ISSUE_ID: 52
     GIT_CONTEXT: ${{ toJson(github) }}
     
    steps:
    ################### CORE REGION #######################
    - name: Checkout repo
      uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Check commit messages
      shell: bash
      run: |
        echo $GIT_CONTEXT
        echo =======================
        echo "${{ github.event.commits[0].message }}"
        git log --format=%s "${{ github.event.before }}...${{ github.event.after }}" | while read -r line; do
          if [[ $line =~ \[#[0-9]+\] ]]; then
            echo "Commit Message: $line (Matched)"
            issue_number=$(echo "$line" | grep -oE '\[#([0-9]+)\]' | sed 's/\[#\([0-9]\+\)\]/\1/')
            if [[ -n "$issue_number" ]]; then
              # Kiểm tra sự tồn tại của issue bằng GitHub API 
              apiUrl=https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/$issue_number
              response=$(curl -s $apiUrl)
              echo $apiUrl
              url=$(echo "$response" | jq -r '.html_url')
              if [[ $url =~ ^https://github.com/.*\/issues\/[0-9]+$ ]]; then
                echo "Đây là URL của issues: $url"
                echo "ISSUE_NUMBER=$issue_number" >> $GITHUB_ENV
              else
                echo "Đây không phải là URL của issues: $url"
                exit 1
              fi
            fi
          else
            echo "Commit Message: $line (Not Matched)"
            exit 1 # Exit với mã thành công nếu tìm thấy
          fi
        done
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    ################### END CORE REGION #######################


    # The coverage report only supported for version up commit, unittest_* and dev* branch 
    ################### UNITTES REGION #######################
    - name: Run tests with coverage
      run: dotnet test --configuration Release --collect:"XPlat Code Coverage"
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.7
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
      with:
        reports: '*Test/TestResults/*/coverage.cobertura.xml'
        targetdir: 'CoverageReports'
        reporttypes: 'HtmlInline;Cobertura'
        verbosity: 'Verbose'
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
      with:
        name: CoverageReports-Release # Artifact name        
        path: CoverageReports # Directory containing files to upload
    ################### END UNITTEST REGION #######################



    # The ARC report only supported for version up commit 
    ################### SAM REGION #######################
    # Run SAM 
    - name: create arcrunner.bat
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      shell: cmd
      run: |
        set projectPath=%CD%
        set samPath=%projectPath%\ArcRpter\bin\sam.exe
        set samDir=%projectPath%\.sam-dir
        (
        	echo @echo off
        	echo %samPath% init --sam-dir %samDir%
        	echo dotnet clean SPRNetTool\SPRNetTool.csproj -c Release
        	echo %samPath% scan --sam-dir %samDir% --source-path %projectPath% --language cs dotnet build SPRNetTool\SPRNetTool.csproj -c Release
        	echo %samPath% analyze --sam-dir %samDir% --source-path %projectPath% --language cs 
        	echo %samPath% calculate --sam-dir %samDir% --source-path %projectPath% --language cs 
        ) > arcrunner.bat
        type %CD%\arcrunner.bat
        powershell -command "ls"
    - name: Set up Python
      uses: actions/setup-python@v4
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      with:
        python-version: '3.11'
    - name: Add Python to PATH
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: |
        echo "%PYTHON%;%PYTHON%\Scripts" >> $GITHUB_PATH  # Đảm bảo Python được thêm vào biến môi trường PATH
    # TODO: Dynamic asset download link
    # Refer: https://stackoverflow.com/questions/20396329/how-to-download-github-release-from-private-repo-using-command-line
    - name: Download and Install ArcRpter
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: |
        Write-Host Hello world
        $url = "https://api.github.com/repos/TrdHuy/ArcRpter/releases/assets/126947734"
        $outPath = "ArcRpter.zip"
        $pat = "${{ secrets.WORK_FLOW_ACCESS_TOKEN }}"
        Invoke-WebRequest -Uri $url -OutFile $outPath -Headers @{"Authorization" = "token $pat"; "Accept" = "application/octet-stream"}
        Expand-Archive -Path ArcRpter.zip -DestinationPath ArcRpter
    - name: Run arcrunner.bat
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: |
        ./arcrunner.bat
    - name: Upload artifact
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      uses: actions/upload-artifact@v1.0.0
      with:
        name: ArcReport # Artifact name        
        path: .sam-dir\sam-result # Directory containing files to upload
    ################### END SAM REGION #######################
