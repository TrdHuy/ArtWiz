on:      
  push:
    branches:
      - '*'
jobs:

  build:
    runs-on: windows-latest
    env:
     VERSION_UP_ISSUE_ID: 52
     BUILD_HEAVY_PUBLISH: false
     PROJEFCT_PATH: SPRNetTool\ArtWiz.csproj
     GITHUB_TOKEN: ${{ secrets.WORK_FLOW_ACCESS_TOKEN }}
     REPO_OWNER: TrdHuy
     BUILD_PLUGIN_REPO: _TrdBuildPlugin
     SIGNING_CERT_FILE_NAME: SigningCert.pfx
     CERT_PWD: ${{ secrets.CODE_SIGINING_CERT_PWD }}
     PUBLISH_INFO_FILE_PATH: publish-info.xml
     EXE_PATH: ArtWiz.exe
     # GIT_CONTEXT: ${{ toJson(github) }}
     
    steps:
    ################### CORE REGION #######################
    - name: Checkout repo
      uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Check Commit Message by github script
      uses: actions/github-script@v5
      id: get-last-issue-id
      with:
        result-encoding: string
        script: |
          const versionUpIssueId = process.env.VERSION_UP_ISSUE_ID;
          const refName = ${{ toJSON(github.ref_name) }};
          console.log(`refName: ${refName}`);
          const commits = ${{ toJSON(github.event.commits) }};
          const commitMessages = commits.map(function (commit) {
              return commit.message;
          });
          const normalCommitRegex = /^\[#(\d+)\] .+/;
          const mergeCommitByGHRegex = /^Merge branch '(\S+)' into (\S+)$/;

          const issueIds = commitMessages.map(function (message) {
              const match = message.match(normalCommitRegex);
              if (match && match[1]) {
                return match[1]; // Lấy số id từ kết quả match
              } else {
                const mergeMatch = message.match(mergeCommitByGHRegex);
                if (mergeMatch && mergeMatch[2] == refName) {
                  console.log("This is auto merge commit by GitHub")
                  return "";
                }else{
                   throw new Error(`Commit message "${message}" is invaild `);
                }
              }
          });

          for (const issueId of issueIds) {
            try {
              if (issueId == ""){
                 continue;
              }
              const rawData = await github.rest.issues.get({
                issue_number: issueId,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const data = rawData.data;
              const issueUrl = data.html_url;
              if (issueUrl.includes("/issues/")) {
                  console.log("Đây là URL của issue.");
              } else {
                 throw new Error(`github ID: "${issueId}" not invaild `);
              }
              console.log(`Tiêu đề: ${data.title}`);
              console.log(`versionUpIssueId: ${versionUpIssueId}`);
            } catch (error) {
              console.log(`Issue #${issueId} không tồn tại.`);
              console.log(error);
            }
          }
          return issueIds[issueIds.length - 1];
          
    - name: Export issue to env
      shell: bash
      run: |
        echo "ISSUE_NUMBER=${{steps.get-last-issue-id.outputs.result}}" >> $GITHUB_ENV
    

        
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Test signtool
      run: |
        echo "Hello, this is a CMD command"
        where msbuild
        msbuild -version
        where signtool
        echo HUY1
        dir "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\"
        echo HUY2
        dir "C:\Program Files (x86)\Windows Kits\10\bin\"
       
    - name: Check if Signtool exists
      shell: powershell
      run: |
        $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe"
        if (-Not (Test-Path $signtoolPath)) {
          Write-Error "Signtool 22000 not found. Exiting with an error."
          exit 1
        } else {
          Write-Host "Signtool 22000 found. Continuing the job."
          exit 0
        }

        $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.123456.0\x64\signtool.exe"
        if (-Not (Test-Path $signtoolPath)) {
          Write-Error "Signtool 123456 not found. Exiting with an error."
          exit 1
        } else {
          Write-Host "Signtool 123456 found. Continuing the job."
        }
    ################### END CORE REGION #######################


    # The coverage report only supported for version up commit, unittest_* and dev* branch 
    ################### UNITTES REGION #######################
    - name: Run tests with coverage
      run: |
        dotnet nuget remove source "trdhuy-nuget-package-source"
        dotnet nuget add source "https://nuget.pkg.github.com/TrdHuy/index.json" --name "trdhuy-nuget-package-source" --username "trdtranduchuy@gmail.com" --password "${{ secrets.WORK_FLOW_ACCESS_TOKEN }}"
        dotnet restore
        dotnet test --configuration Release --collect:"XPlat Code Coverage"
    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.7
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
      with:
        reports: '*Test/TestResults/*/coverage.cobertura.xml'
        targetdir: 'CoverageReports'
        reporttypes: 'HtmlInline;Cobertura'
        verbosity: 'Verbose'
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID || startsWith(github.ref, 'refs/heads/unittest_') || startsWith(github.ref, 'refs/heads/dev')
      with:
        name: CoverageReports-Release # Artifact name        
        path: CoverageReports # Directory containing files to upload
    ################### END UNITTEST REGION #######################



    # The ARC report only supported for version up commit 
    ################### SAM REGION #######################
    # Run SAM 
    - name: create arcrunner.bat
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      shell: cmd
      run: |
        set projectPath=%CD%
        set samPath=%projectPath%\ArcRpter\bin\sam.exe
        set samDir=%projectPath%\.sam-dir
        (
        	echo @echo off
        	echo %samPath% init --sam-dir %samDir%
        	echo dotnet clean ${{ env.PROJEFCT_PATH }} -c Release
        	echo %samPath% scan --sam-dir %samDir% --source-path %projectPath% --language cs dotnet build ${{ env.PROJEFCT_PATH }} -c Release
        	echo %samPath% analyze --sam-dir %samDir% --source-path %projectPath% --language cs 
        	echo %samPath% calculate --sam-dir %samDir% --source-path %projectPath% --language cs --scoring-metrics cc,dc,mcd,cbo,loc,ncs
        ) > arcrunner.bat
        type %CD%\arcrunner.bat
        powershell -command "ls"
    - name: Set up Python
      uses: actions/setup-python@v4
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      with:
        python-version: '3.11'
    - name: Add Python to PATH
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: |
        echo "%PYTHON%;%PYTHON%\Scripts" >> $GITHUB_PATH  # Đảm bảo Python được thêm vào biến môi trường PATH
    # TODO: Dynamic asset download link
    # Refer: https://stackoverflow.com/questions/20396329/how-to-download-github-release-from-private-repo-using-command-line
    - name: Download and Install ArcRpter
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: |
        Write-Host Hello world
        $url = "https://api.github.com/repos/TrdHuy/ArcRpter/releases/assets/126947734"
        $outPath = "ArcRpter.zip"
        $pat = "${{ secrets.WORK_FLOW_ACCESS_TOKEN }}"
        Invoke-WebRequest -Uri $url -OutFile $outPath -Headers @{"Authorization" = "token $pat"; "Accept" = "application/octet-stream"}
        Expand-Archive -Path ArcRpter.zip -DestinationPath ArcRpter
    - name: Run arcrunner.bat
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: |
        ./arcrunner.bat
    - name: Upload artifact
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      uses: actions/upload-artifact@v1.0.0
      with:
        name: ArcReport # Artifact name        
        path: .sam-dir\sam-result # Directory containing files to upload
    ################### END SAM REGION #######################

    
    ################### BUILD ARTIFACT #######################
    - name: Setup MSBuild.exe
      #if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Restore package
      #if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: dotnet restore ${{ env.PROJEFCT_PATH }}
      
    - name: Light publish
      #if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: msbuild ${{ env.PROJEFCT_PATH }} /t:Publish /p:Configuration=Release /p:PublishDir=..\light_publish /p:DebugType=embedded /p:DebugSymbols=false /p:GenerateDependencyFile=false
    - name: Codesigning light
      shell: pwsh
      run: |
        $result = & .\code_signing.ps1
        echo result=$result
    - name: Zip light release
      #if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      run: Compress-Archive -Path 'light_publish' -DestinationPath 'light_publish.zip'
    - name: Upload light_publish artifacts
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID
      uses: actions/upload-artifact@v3
      with:
        name: light_publish.zip
        path: light_publish.zip
        
    - name: Heavy publish
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID && env.BUILD_HEAVY_PUBLISH == 'true'
      run: msbuild ${{ env.PROJEFCT_PATH }} /t:Publish /p:Configuration=Release /p:PublishSingleFile=true /p:RuntimeIdentifier=win-x64 /p:SelfContained=true /p:PublishDir=..\heavy_publish /p:DebugType=embedded /p:DebugSymbols=false /p:GenerateDependencyFile=false
    - name: Codesigning heavy
      shell: pwsh
      run: |
        $result = & .\code_signing.ps1
        echo result=$result
    - name: Zip heavy release
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID && env.BUILD_HEAVY_PUBLISH == 'true'
      run: Compress-Archive -Path 'heavy_publish' -DestinationPath 'heavy_publish.zip'
    - name: Upload heavy_publish artifacts
      if: env.ISSUE_NUMBER == env.VERSION_UP_ISSUE_ID && env.BUILD_HEAVY_PUBLISH == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: heavy_publish.zip
        path: heavy_publish.zip
    ################### END BUILD ARTIFACT #######################
